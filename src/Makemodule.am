################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
program_libs = src/libalert_agent.la ${project_libs}

# Programs need to link the c++ runtime if everything was compiled statically.
if !ENABLE_SHARED
program_libs += -lstdc++
endif

lib_LTLIBRARIES += src/libalert_agent.la
pkgconfig_DATA = src/libalert_agent.pc

include_HEADERS = \
    include/alert_agent.h \
    include/bios_alert_generator_server.h \
    include/alert_agent_library.h

src_libalert_agent_la_SOURCES = \
    src/metriclist.cc \
    src/alertconfiguration.cc \
    src/luarule.cc \
    src/purealert.cc \
    src/rule.cc \
    src/thresholdrulecomplex.cc \
    src/bios_alert_generator_server.cc \
    src/platform.h

src_libalert_agent_la_CPPFLAGS = ${AM_CPPFLAGS}
src_libalert_agent_la_CXXFLAGS = ${AM_CXXFLAGS}

src_libalert_agent_la_LDFLAGS = \
    -version-info @LTVER@ \
    $(LIBTOOL_EXTRA_LDFLAGS)

if ON_MINGW
src_libalert_agent_la_LDFLAGS += \
    -no-undefined \
    -avoid-version
endif

if ON_CYGWIN
src_libalert_agent_la_LDFLAGS += \
    -no-undefined \
    -avoid-version
endif

src_libalert_agent_la_LIBADD = ${project_libs}

if WITH_BIOS_AGENT_ALERT_GENERATOR
bin_PROGRAMS += src/bios-agent-alert-generator
src_bios_agent_alert_generator_CPPFLAGS = ${AM_CPPFLAGS}
src_bios_agent_alert_generator_LDADD = ${program_libs}
src_bios_agent_alert_generator_SOURCES = src/bios-agent-alert-generator.cc
if WITH_SYSTEMD
src_bios_agent_alert_generator_servicedir = @prefix@/lib/systemd/system
src_bios_agent_alert_generator_service_DATA = src/bios-agent-alert-generator.service
src_bios_agent_alert_generator_systemd_tmpfilesdir = /usr/lib/tmpfiles.d
src_bios_agent_alert_generator_systemd_tmpfiles_DATA = src/bios-agent-alert-generator.conf
endif #WITH_SYSTEMD

src_bios_agent_alert_generator__var_lib_bios_alert_agent_warranty_ruledir = /var/lib/bios/alert_agent
src_bios_agent_alert_generator__var_lib_bios_alert_agent_warranty_rule_DATA = src/warranty.rule

endif #WITH_BIOS_AGENT_ALERT_GENERATOR
if WITH_ALERT_AGENT_SELFTEST
check_PROGRAMS += src/alert_agent_selftest
noinst_PROGRAMS += src/alert_agent_selftest
src_alert_agent_selftest_CPPFLAGS = ${AM_CPPFLAGS}
src_alert_agent_selftest_LDADD = ${program_libs}
src_alert_agent_selftest_SOURCES = src/alert_agent_selftest.cc
if WITH_SYSTEMD
endif #WITH_SYSTEMD


endif #WITH_ALERT_AGENT_SELFTEST


# define custom target for all products of /src
src:
	src/bios-agent-alert-generator \
	src/alert_agent_selftest \
	src/libalert_agent.la

check-local: src/alert_agent_selftest
	$(LIBTOOL) --mode=execute $(srcdir)/src/alert_agent_selftest

check-verbose: src/alert_agent_selftest
	$(LIBTOOL) --mode=execute $(srcdir)/src/alert_agent_selftest -v

# Run the selftest binary under valgrind to check for memory leaks
memcheck: src/alert_agent_selftest
	$(LIBTOOL) --mode=execute valgrind --tool=memcheck \
		--leak-check=full --show-reachable=yes --error-exitcode=1 \
		--suppressions=$(srcdir)/src/.valgrind.supp \
		$(srcdir)/src/alert_agent_selftest

# Run the selftest binary under valgrind to check for performance leaks
callcheck: src/alert_agent_selftest
	$(LIBTOOL) --mode=execute valgrind --tool=callgrind \
		$(srcdir)/src/alert_agent_selftest

# Run the selftest binary under gdb for debugging
debug: src/alert_agent_selftest
	$(LIBTOOL) --mode=execute gdb -q \
		$(srcdir)/src/alert_agent_selftest

# Run the selftest binary with verbose switch for tracing
animate: src/alert_agent_selftest
	$(LIBTOOL) --mode=execute $(srcdir)/src/alert_agent_selftest -v

if WITH_GCOV
coverage: src/alert_agent_selftest
	@echo "called configure --with-gcov"
	lcov --base-directory . --directory . --zerocounters -q
	$(MAKE) check
	lcov --base-directory . --directory . --capture -o coverage.info
	lcov --remove coverage.info "/usr*" -o coverage.info
	lcov --remove coverage.info "alert_agent_selftest.c" -o coverage.info
	$(RM) -rf coverage/*
	genhtml -o coverage/ -t "alert-agent test coverage" --num-spaces 4 coverage.info
else
coverage: src/alert_agent_selftest
	@echo "call make clean && configure --with-gcov to enable code coverage"
	@exit 1
endif

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
